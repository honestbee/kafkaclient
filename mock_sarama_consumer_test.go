// Code generated by mockery v1.0.0. DO NOT EDIT.
package kafkaclient

import cluster "github.com/bsm/sarama-cluster"
import mock "github.com/stretchr/testify/mock"
import sarama "github.com/Shopify/sarama"

// mockSaramaConsumer is an autogenerated mock type for the saramaConsumer type
type mockSaramaConsumer struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *mockSaramaConsumer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Errors provides a mock function with given fields:
func (_m *mockSaramaConsumer) Errors() <-chan error {
	ret := _m.Called()

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// MarkOffset provides a mock function with given fields: msg, metadata
func (_m *mockSaramaConsumer) MarkOffset(msg *sarama.ConsumerMessage, metadata string) {
	_m.Called(msg, metadata)
}

// Messages provides a mock function with given fields:
func (_m *mockSaramaConsumer) Messages() <-chan *sarama.ConsumerMessage {
	ret := _m.Called()

	var r0 <-chan *sarama.ConsumerMessage
	if rf, ok := ret.Get(0).(func() chan *sarama.ConsumerMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *sarama.ConsumerMessage)
		}
	}

	return r0
}

// Notifications provides a mock function with given fields:
func (_m *mockSaramaConsumer) Notifications() <-chan *cluster.Notification {
	ret := _m.Called()

	var r0 <-chan *cluster.Notification
	if rf, ok := ret.Get(0).(func() <-chan *cluster.Notification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *cluster.Notification)
		}
	}

	return r0
}
